package main

import (
	"encoding/json"
	"strings"

	http "github.com/bogdanfinn/fhttp"
)

type arkose_response struct {
	Token string `json:"token"`
}

func get_arkose_token() (string, error) {
	url := "https://tcr9i.chat.openai.com/fc/gt2/public_key/35536E1E-65B4-4D96-9D97-6ADB7EFF8147"
	payload := "bda=eyJjdCI6IjJ3U2IwKzdkTVU4aE5lK2owdmExWUEvd2Q5MEFLeE5RemovSlRLL3hMNG42NFFWQVpzSU5YMVB5UjlBejUvbFlXL0VrYVJMeU8wSHdLeDJrdnNyNlBndUFhMUdqV3B3akVoQmxKTVNpVXREdE5ITGVxLyt6eW1mNG1QVTY5WVFQZzBSSVF0VWhzeGNwQ0Z0YzVnZTdDN3R1OHdkN05WNDBoM0xxZ2xNWlhwVDBiZ0hLN1hwMkpRMjR3MG9nUE5zL0UwWXhrN1c5bTdVTVR2R3NZK2ZsNzFRcjBBcm9qdG1DamdIOTBEaXhuVnJYYXFvWFUyQjVWekNaajhXVWVoOVZuUG9GeFBmcmpVWnZldGRaaXU4QXEzK3hzYWF0YXg1QnNzeWtIL1o2WFlCcGZXRVJWYnZldG9ybkRhQmd2M0tsSXA5VTJOcDd0STFsdnlIYXN5UjlxMDN4V3J1ZGJvVXNSV3E0QjFOalZOMGhpT0xEbVQ0NERsc2ptZWJNZzNCa2srYlBmd001WkdtYi9wT1hpUXhOYkcwYW1BelRFYkU3Vk1OZFV1RlBIZ3NxdTNlRDRGSnplTFZ5Zlp6UTE4UHNHVVMrMVdjSUFNTjZ5bmw2RWNqcEtXMDFLc0Q0RTBob25qc0xvREhaVS90dS9MT1hHRVJPd1l4dW1FZnUzRVdoZ3dUN0tuUi9FYy9xZXpQRXZuaTNrUVI3SVJ1bjZsR1pST2Evb2FXNnRWRis0K0YvV21uVEwyaDc0K0kwY1RNRkl0bFVZU00rR0JWcUd3WVlDemhEWFora3NNM2JWWjFzdWkrR29BckxvK0NkckN3NW1rc2pNM0hleDBVUEhySjhETGdxS043eW9rcnVObDk1N3hJaWlDZzdaMzF1M1lTNzgzdk1rZ1c4c3ltWVZaL3BxRDlGTUVGTXF1SkFzZVRBSFE2L09haDRVWGRIWjdkTTZNalNpR0ZRR3J3R0ZyVVBOTjQxMisyVkoxbjRJeHVNS0FCUytJQnl3R2J6UWtyOHdpcGZ0V1R6bm5JMk5BSWlYZy9sYVlUQ2RGNlpsL3VKb3I1L2JiUGN2RktTK011UXJPL2tkb1V6ZEJaTW56bWtqTTEyTm12M3BMQk9qcGw0VmRPSmJWZU0zUUplT0Rtc3htZ3ppS3hUa1FSamZCS3RMdlpjTlNTalU0TUpmZ09PY3I3S0Rqa2UvRnlDYSszWUNjVlZwNHA1QWMvN01oYUVZTmV1RXFxT2xTVytrR2pDdDVvdXpMMkIvODhKWHBsZk9nc1YvS3FyRVprTEVHd1R5UEwyK1Rzd3JJRWJyZElGOENSM2t3S2xaSVhHVVhVS1hHTDYzS2YwbjNvUHQ2ZXhqcWVZd0VnYWxwWk9ram5xKzdGWENXMmNNRk1Mb2kxRXR4YUtOWXJjblZBZ2c4aXkzdVBha1NxTkZma3BiM0dIV25OcVpZL2tnVzRBejlSeW85OVZwSlZoak5hamdnMG9YdTRUcnJoVHdoTklpdzczbC9hZ2pGRENEZmZ2eng1MWRpWHZUVDhEY2lReUgxMDFXQ0g2WHAwejVyTDIxU0Y1cCtNZ1BZZVNsSzBqSkdmWjE3VnZtdjYxOVdycVdXMTJqTUNZdkhJK2NmeDV2ZGR5TFZWNSt1NVdUckNydUlhOS9LUGd2MVNMdzRSLzg3VS96YXRiTFg3NU1neUlqT1FVSkIwZ2R4MGFScnZiWGx5LzVZUlZGRDZBRGc5S2dPSnVZWmhVdWg4NktYc0JDa2ZudnZMcjI3My9ialMyTjZ5WW9zZVNpMWZRT29KMmNoNjEzTEtmSjN2UjVIV1QrY0RYRlEvSTAxZDBMRXlZTXBtSmJLVHNhOG5FQkZHeWxpQTFWNk5FMXpnSEJZRXozVHlKalVwalRPQXMxWmdUb0ttb1FlMmk0OUgrY1FIZFRpdytrVi8vNVFOS1prRzNtcDNyQVRJYkVJTU12UlBLTlF1YThHQWZieXV2dHRmNkdyTlhHeldPdHBwbm5PNnFpSkJaZXRCT0dwWkZZTU1mcVNldGpYU2pabFdxMXVTSzZrUjc3dHdpa3Zta2dwQnRLdktiTDVrald3eElMVGdneDBmakM5Qjh1azYweitJZVNxenF2bnBuOXB5ZzlVZ0Fxb0xncHY3Um56ZEsySHJuY3ZzNkhTc3JGTW9iYWRvR3hpdk1QN204UC9rTVg3VjJBMEZRMVREUFNPSWFnMDFSWDVQOXZjZ3psVFhienZyMzl5VXhSWlRsUFVwNzhud3lFQzVWUzB4RUJzaXExTzVGUFdIV2R0Z3A1RkE2RGFrUnZIZzBLR0VWVWJzVzZ2cG9wUGpadW8yeFRTdlVxRWcwMGQwZ25BTmdUUnV3cnV3anhtWGpUa21OSCtWS3NkTklIQ1lWd3ZkOHZBa2hGTlF0MFRhV1NydVZoeTZNcmx2L1hTRzZLRVBwUUdQcWs4TFlZNHpocjlRUXltNDZjQUk1a25MaWlkY3pYNC8rR1E1S2xGUVZrUU9EK1lyRnduVElEZUZvWHB5RDBDRXdHcDZyME5aemU2THp2WWNQSVBDMStKTFJLYktqQTFjZnlndEVRdnFNUzh0ZFoyaHR5d0d6REUvbWlJM05ZNW9WVjFCRlZNNWZoMURjOGUvMyttUlFleEhkc0ZOaVVqQkFQeURZeC96Um81MlA1NnI1bGgyYjZQaFpCN3p3VVpwWlk2MGlWSnZiSU05R0pzUHhFaStiRFNiRkNJYk1NbUJFZWNpQk9STUdUeTFwdXpRZVlscElQR2hXNWRrdGxpMVNhTm1zWlNNNHJOeTRGenRxN1ZTODlUVjBsTHZENTlGUnZmOW8rTi85cWV6Ti9OcUpXYUZ2dnJNQmJ5MHZhUzR3cVVhemFPVnM4MnYwbUI3Nm9tL1V4UksyZEtQSG9jSWx5VVlpWFNXQVNEdWxJWVpsU1M2VXRrSjRkUlFETHYxaGgxRy9YNGNqUXpVV1lGTS83TjZFcFgyUzVBd2VjQS8xNGhzNTk3TzhJUHVFaWUxdWtJOGJSQUJCbDlGKzNVUzUxUW1mN1FUUXliakRNUUtLdjJ3VmlTamhBZE1TMCthRjJWNnNGMDB4V2xwR0I5Y291Y0RpVlNQZ2xmblFSakZaSUhoSVFVckJ2dkZqRGlmVWJheU9tNExaOG1QZWNuWjV0UTRDUkFhdEV0MStUbmFROWU4ZGlNZ2p1aW5WdlZMVUkyVGRJNU8yUkx1VHNTaUdJdVh2T003dlVHUnB4WTdEaURkTk5aUk9KY1RWeHduWEo5STlxZFI0YTh5T3hGSVdRRUg2WXVlNVV4VGJ0d3NjWG05V3A1K0pFNnpIKzJsdW5vMjE0UWZsTkl2UTRtVFJ6dHlCUlBLOGpuNWZOYTF1Rytoa25NNks3bEdnelA4bmRoL0JoR0ZnMjdjaCtFdG8wUHhsTURZd2NUcy9zRCt5Z0tMZU5qcDIrd1JTSmZObzdUSXdPWU5PMStXWDBlZVRiczBDbS9EMHc2aS9nUzJUdFhBK0NYc1M0UkI2UTRoc0txWlBOOEJZQ3Zsd2pSWDR2YWpMOVVxSGRFaVArb3IvWmNmNmROVTR2M3cvdGVRTDdMdi8rSlFIY0F0Y3VtbStzWlpDL09UYXd6eDVQREhGRk1lUG93L0NQd2VZb09uSkJEeHV5cHI2YkNrT2FGazN0K2U3TnlucmhoMFhGNkpKQnBSZXQvbjFITFh0dGZRQ3l6Mm5uTTAwOFM4Rm43Y2xZVFo2Y05GUENtcG1TV21ZYitCOFk4REJVdk1NZ3dpYjdKYklCSm5WMlplbWtQU2dZWVAvN09XaVlQNUd1RWxvcEdEeHMrR0gvYU4wMVE3N0JHT1gyMVlNUlQ5NytSS0gzekVlNUZyc0JDTm9aUU5kRHluTjlzbitUQ3JMWkJMZWhFQTJ0VXNSWmR3dmw1aS9lMlgyZSszSHBFb2Fkc0RwLzdNM1F4ckRpeGgwd3ovSjlEQVVsaFF4eHR4NUpNd1JZazBwRkpUV2N2QWFjbEo5OU9uR1RFMFdSZ3cxcnYvVTdZNHhhNHlabGQ0WmpMOUtBVGkvNkpWWlNBVFAzMnViZXN5TVliSmtMcnVONTZ6UytidHZ5bmNMUjl4dmY4R0lTd2dLN1dZVDZCTzUzT3haUmdRWXlHc3I0SXFxMkpWT3QweEtGQXB5ak1xNUZ2eVNNbkZ3WXZEMXYyelNpN3hRWUNNbmZ2NjlSWCtYZFJ3aVVvRUtEYURialNNN3VDOU41MTFzQlRJT2NsODd6emszMTdBcnJhNGhxemhoWnlPU1crU1ZmSG56Y1AyY0l2TnV1UjNscktlbGdNNmJYSk1FQThpV0lxbG1mclh1TXNYTHJhMUFiYy9kVnpNVXVzeFpEMENzbjZsOWVGVlh3eW9kZDdPT0s5Wlk4Nzd5STlMN1BVTDFxL2hrakw4SjY0OW5KMEdKOGUrVnA5dVJqS2JhMkVhU0JZS2pHbjhEdWl3ejZPQTdHc3YzT2hyckFKVXQranBOdGVCYVB2Tll6eU0wUjMxZzgwMFpvQ1FjNkFIVzVROWNIRGFlZWY4N2lQYm9sV0FRbVVrajhNR1IrUmV3Z3E0ZEcwdjZiUThkbTBaUzh0L0tqa0tsTHZYRDNRMFdjRnFpL2JEU25IVitDeVk4Q2ljdTJ2UFp2clBOUlptdEFtSEhzdGxIVjhuR0R1emg3d21ZNHp4eFZOUTJ1M2syQTlxeVI3SHBTcTZUaFFUbFpXVDluSFgwd2FxSTVKZlNlOXlKN0g5LzIwRmlWRjB1WGNHM0hHV0pkN1cxM1dVVjdnbkxQOStOcEptanJvZ2pBZVZIa2ptMElFblM3S0RhYjhiMjY5NjZZcWtsM0lzZFhJanNFNlFML1VqMFVPL3B3dW9DYWhGNnBUNVpBTFpXcXg5eUJXcUdwa1pBYUJha0tvdThHRndmL0pLUnRDdFd5ZVduQ1M4RS8wRTJOUEpraTdyZVZUTjhHTEFGRkVDMnlud2dsdzRDbE1YdUhnQWIwMUpVL0JmYVhYRVRGR1p3U05TejVaN0gvU1FReTE1UjgwL05TWVB3cHEzUUFGcWFIMmNIY3Zrbk0xL3Awd0hrVmQvQWd3b25OVXlaZEpUenZHZmsxRWJBQTlpeGtNc0k5cCtmR3kxVUoxODZIdmt3Wk9QSTdiL3N5VEtQdGh4TEM2Nk9scXI4S0MrQ1laSlFHN3VuMGgzUHV0WHJ0Zk1BM2hySDlLMm1VSk1XNHdhSDE1bjUwcTd0bmdoK3QvVzNxbUpmU1hPTTVTaENGRkdIeG5SRlRqdThmT3BYMUNYL2U3Q1NGNDdmWXBrTkpXM0MyVU1DMkZqeERMYU9ucVNvYWI1dVg3am9XbGo1MFFxdWZERWdqK2dQQmZBRlBJUTcydkZka3BnVVVCaCtrS09YWWtSRmlNczIvZ1B0ejRPSzh3MWViQXZNcjhiRi9XOVY0NG53eUxXZ2pYdEUwSWVHZ09QZklwc2tCK2cvU25YVlZjQ3B2TkcyZUlmc1l5VXJaNzV1bW5kWkhVcnQrbmFIRGhGZnVPODNORUNQYXhCem1rUFB5MTR4UDBpcjNNOXAreXc5YU5vUGJwcVRleTB6a3l0Wk5nUVExTEFjc0E3QVZ3a0RQQndYTHh3OWpJeXBYSWcyekY1SE40NDJOZUh5alVNWFBTMTFvNitqTlcyTDFRajlDZXVBMFJDZHo2UVVkTERJcUpPQ0l2RWNYSFQrMmpmcDZRWjRJTmlsOFcxV0p4N1V6ZzZkQmpIZmF4Ym4xeUtGb1VmVFZFUTZiaW42ajBlR0FIdlZidTk0RFBCTEllK1JRU2pTQXA3M3NGNGZzbkxicVh3WkJxcStuemZDZ1hMd1lTVFF0Y2N3R2hkbkV0ZlVKU3FmaUlNdTJuT1hmZWFDNklEbkdRRE1sVVJpWmpZc2FKeTcxTTBhR3MwcTdmbFJhSkl4U3F6S1krVUNZVXRwT1E0Q3ZFNzNjNHhHVjFKL0w1K21pb00vQkZyM2NGYWg0SW01NTRWaUVIa0dKTjVrTktPWTlLNVNreDdCQ0xEQi9HdUIrTGh3Yk1GQ0JsQlk4Vk1taitxK3BzQ3M3VTllVi9lSERtUXBiRHhkbmhvR1d1b3k4NVFwRVIrb3VRVmZSeXhGN1p1c1FvaTA5UUJhSVhUTWQ1VTV0RStETHpldjVFVFR4K09IY1paSDRaSVg2bUlHWExNNG5WMHZ4ZzFJNGZvTEFJL1BQV3Vla010VlkxM3FkMkZZY1J2aG5mNXA0UTBLSmZESnYxVjNuRzJIZnc2S0llZ0p4eXI2elp2RUQ3WDc1R0VoQThCSkdncitoZUhWNC9qMVVybGUzM1hUbmlqTkNLZ2tCZGptMkR0enNoTkQzcjMyVU4xRHFXV1hvb0NobkthRDdFMXl5UHovYnNvT1M5QUM1RVBmUllsQ0ZkN0liTjRxUE5CZzJGcnB0ZSsvNFAwM2hlUjVwTkNHanU5RzVOemtzdlVlNGpzPSIsIml2IjoiYmIxNmY3NDJhNDk5ZDYwYTI0NTY4NTI5MGJlMzQ0ZjQiLCJzIjoiYWFhYmI3YjVkNDJmMjEwMCJ9&public_key=35536E1E-65B4-4D96-9D97-6ADB7EFF8147&site=https%3A%2F%2Fchat.openai.com&userbrowser=Mozilla%2F5.0%20(X11%3B%20Linux%20x86_64%3B%20rv%3A114.0)%20Gecko%2F20100101%20Firefox%2F114.0&capi_version=1.5.2&capi_mode=lightbox&style_theme=default&rnd=0.2304346700108898"
	req, _ := http.NewRequest(http.MethodGet, url, strings.NewReader(payload))
	req.Header.Set("Host", "tcr9i.chat.openai.com")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; rv:114.0) Gecko/20100101 Firefox/114.0")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Accept-Language", "en-US,en;q=0.5")
	req.Header.Set("Accept-Encoding", "gzip, deflate, br")
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
	req.Header.Set("Content-Length", "6915")
	req.Header.Set("Origin", "https://tcr9i.chat.openai.com")
	req.Header.Set("DNT", "1")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Referer", "https://tcr9i.chat.openai.com/v2/1.5.2/enforcement.64b3a4e29686f93d52816249ecbf9857.html")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Site", "same-origin")
	req.Header.Set("TE", "trailers")
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()
	var arkose arkose_response
	err = json.NewDecoder(resp.Body).Decode(&arkose)
	if err != nil {
		return "", err
	}
	return arkose.Token, nil
}
